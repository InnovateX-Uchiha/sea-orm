//! SeaORM Entity. Generated by sea-orm-codegen 0.4.2

use sea_orm::entity::prelude::*;

#[derive(Copy, Clone, Default, Debug, DeriveEntity)]
pub struct Entity;

impl EntityName for Entity {
    fn table_name(&self) -> &str {
        "rental"
    }
}

#[derive(Clone, Debug, PartialEq, DeriveModel, DeriveActiveModel)]
pub struct Model {
    pub rental_id: i32,
    pub rental_date: DateTime,
    pub inventory_id: i32,
    pub customer_id: i32,
    pub return_date: Option<DateTime>,
    pub staff_id: String,
    pub last_update: DateTime,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveColumn)]
pub enum Column {
    RentalId,
    RentalDate,
    InventoryId,
    CustomerId,
    ReturnDate,
    StaffId,
    LastUpdate,
}

#[derive(Copy, Clone, Debug, EnumIter, DerivePrimaryKey)]
pub enum PrimaryKey {
    RentalId,
}

impl PrimaryKeyTrait for PrimaryKey {
    type ValueType = i32;
    fn auto_increment() -> bool {
        false
    }
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {
    Customer,
    Inventory,
    Staff,
    Payment,
}

impl ColumnTrait for Column {
    type EntityName = Entity;
    fn def(&self) -> ColumnDef {
        match self {
            Self::RentalId => ColumnType::Integer.def(),
            Self::RentalDate => ColumnType::Timestamp.def(),
            Self::InventoryId => ColumnType::Integer.def(),
            Self::CustomerId => ColumnType::Integer.def(),
            Self::ReturnDate => ColumnType::Timestamp.def().null(),
            Self::StaffId => ColumnType::Custom("BLOB".to_owned()).def(),
            Self::LastUpdate => ColumnType::Timestamp.def(),
        }
    }
}

impl RelationTrait for Relation {
    fn def(&self) -> RelationDef {
        match self {
            Self::Customer => Entity::belongs_to(super::customer::Entity)
                .from(Column::CustomerId)
                .to(super::customer::Column::CustomerId)
                .into(),
            Self::Inventory => Entity::belongs_to(super::inventory::Entity)
                .from(Column::InventoryId)
                .to(super::inventory::Column::InventoryId)
                .into(),
            Self::Staff => Entity::belongs_to(super::staff::Entity)
                .from(Column::StaffId)
                .to(super::staff::Column::StaffId)
                .into(),
            Self::Payment => Entity::has_many(super::payment::Entity).into(),
        }
    }
}

impl Related<super::customer::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Customer.def()
    }
}

impl Related<super::inventory::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Inventory.def()
    }
}

impl Related<super::staff::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Staff.def()
    }
}

impl Related<super::payment::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Payment.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
